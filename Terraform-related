https://github.com/ozbillwang/terraform-best-practices

🚀 10 Advanced Terraform Interview Questions & Answers   
🔧 For DevOps Engineers |
Q1: Preventing accidental resource deletion?  
✅ Use lifecycle { prevent_destroy = true }  
✅ Run terraform plan before apply  
✅ Implement strict access controls

Q2: Handling API rate limiting?  
🔁 Use exponential backoff  
🕒 Add time_sleep between ops  
📦 Split deployments into smaller batches

Q3: Recovering from a corrupted state file?  
🛠 Restore from backup  
📥 Use terraform import  
📂 Enable versioning on remote state storage

Q4: Backend migration?  
📤 terraform state pull → update backend → terraform init -migrate-state  
🛑 Schedule during maintenance with backups

Q5: Handling state drift in prod?  
🔄 Regular terraform plan in CI/CD  
⚠️ Automate drift detection + alerts  
🔧 Reconcile with terraform import

Q6: Secrets management?  
🔐 Use Vault / AWS Secrets Manager  
👀 sensitive = true  
🔒 Encrypt remote state at rest

Q7: Zero-downtime infra updates?  
🧱 create_before_destroy  
🟢 Blue-green deployments  
📊 Gradual traffic shifting + health checks

Q8: Structuring modules for enterprise?  
📦 Reusable modules with clear interfaces  
📌 Version constraints  
🔗 Remote state for dependency management

Q9: Large-scale refactoring strategy?  
🔀 Use terraform state mv  
🎯 Targeted applies  
✅ Split into safe, tested PRs

Q10: Terraform testing best practices?  
🧪 Static analysis: tflint, checkov  
🧱 Unit tests: Terratest  
🧹 Ephemeral envs with cleanup
Terraform State Management
1. *Managing Terraform state across environments*
    - Use separate state files for each environment (e.g., dev, prod).
    - Use Terraform workspaces to manage multiple environments.
    - Store state files in a remote backend, such as AWS S3 or Azure Blob Storage.
2. *Remote state locking in team setups*
    - Use a remote backend that supports state locking, such as AWS S3 or Azure Blob Storage.
    - Configure the backend to use a locking mechanism, such as DynamoDB or Azure Blob Storage leases.
3. *Recovering from a corrupted state file*
    - Use version control to track changes to the state file.
    - Store backups of the state file in a secure location.
    - Use `terraform refresh` to re-sync the state file with the actual infrastructure.

Modules & Reusability
4. *Building reusable Terraform modules*
    - Create modules that are loosely coupled and reusable.
    - Use input variables and output values to customize module behavior.
    - Document module usage and dependencies.
5. *Managing shared module versioning*
    - Use semantic versioning to track module versions.
    - Use a version control system to manage module changes.
    - Document module version changes and compatibility.
6. *Dealing with module dependencies and nesting*
    - Use Terraform's built-in dependency management features.
    - Avoid deeply nested module dependencies.
    - Document module dependencies and usage.

Advanced Logic & Operations
7. *Difference between `count`, `for_each`, and `dynamic`*
    - `count`: creates multiple instances of a resource based on a count.
    - `for_each`: creates multiple instances of a resource based on a map or set.
    - `dynamic`: creates dynamic blocks within a resource.
8. *Using `create_before_destroy` lifecycle rules*
    - Use `create_before_destroy` to ensure that new resources are created before old ones are destroyed.
    - This is useful for minimizing downtime during updates.
9. *Terraform import*
    - `terraform import` imports existing infrastructure into Terraform state.
    - This is useful for bringing existing resources under Terraform management.
10. *Monorepo vs Polyrepo Terraform strategy*
    - Monorepo: stores all Terraform code in a single repository.
    - Polyrepo: stores Terraform code in multiple repositories.
    - Each approach has pros and cons, and the choice depends on the organization's needs.

Security & Secrets Management
11. *Securing secrets in Terraform*
    - Use environment variables or secure storage solutions to store sensitive data.
    - Avoid hardcoding secrets in Terraform code.
12. *Integrating Azure Key Vault/Vault with Terraform*
    - Use the Azure Key Vault provider to integrate Key Vault with Terraform.
    - Store sensitive data in Key Vault and reference it in Terraform code.
13. *Enforcing RBAC for Terraform in CI/CD*
    - Use role-based access control (RBAC) to restrict access to Terraform resources.
    - Integrate RBAC with CI/CD pipelines to ensure secure deployments.
14. *Tools for ensuring Terraform security compliance*
    - Use tools like Terraform's built-in security features, AWS IAM, and Azure RBAC.
    - Use compliance scanning tools to detect security issues.

CI/CD & Automation
15. *Implementing Terraform with GitOps*
    - Use GitOps to automate Terraform deployments.
    - Integrate Terraform with CI/CD pipelines to ensure automated deployments.
16. *Handling `terraform plan`/`apply` in pipelines*
    - Use CI/CD pipelines to automate Terraform deployments.
    - Use approval gates to control deployments to production.
17. *Approval gates in prod applies*
    - Use approval gates to ensure that production deployments are reviewed and approved.
    - Integrate approval gates with CI/CD pipelines.

Debugging & Failures
18. *Troubleshooting apply failures*
    - Use Terraform's built-in debugging features.
    - Check Terraform logs and error messages.
19. *Detecting and resolving infra drift*
    - Use Terraform's built-in drift detection features.
    - Use tools like Terraform's `refresh` command to re-sync state with actual infrastructure.
20. *Rollback strategy*
    - Use version control to track changes to Terraform code.
    - Use Terraform's `rollback` feature to revert to previous versions.





▶️ Section 1: Initialize 
1. terraform init: Initializes a Terraform working directory.
2. terraform validate: Validates the Terraform configuration files.
3. terraform fmt: Formats the Terraform configuration files.

▶️ Section 2: Infrastructure Management
4. terraform apply: Applies the configuration to create or update infrastructure.
5. terraform destroy: Destroys the infrastructure managed by Terraform.
6. terraform refresh: Refreshes the Terraform state to match the actual infrastructure.
7. terraform show: Shows the Terraform state and configuration.

▶️ Section 3: State Management
8. terraform state list: Lists the resources in the Terraform state.
9. terraform state show: Shows the details of a specific resource in the Terraform state.
10. terraform state rm: Removes a resource from the Terraform state.
11. terraform state mv: Moves a resource from one state to another.

▶️ Section 4: Module Management
12. terraform get: Downloads and installs Terraform modules.
13. terraform module: Manages Terraform modules.
14. terraform module init: Initializes a Terraform module.

▶️ Section 5: Provider Management
15. terraform providers: Lists the available Terraform providers.
16. terraform provider: Manages Terraform providers.
17. terraform provider init: Initializes a Terraform provider.

▶️ Section 6: Workspace Management
18. terraform workspace: Manages Terraform workspaces.
19. terraform workspace new: Creates a new Terraform workspace.
20. terraform workspace select: Selects a Terraform workspace.

▶️ Section 7: Debugging and Troubleshooting
21. terraform debug: Enables debug logging for Terraform.
22. terraform logs: Shows the Terraform logs.
23. terraform console: Opens a Terraform console for interactive debugging.

▶️ Section 8: Import and Export
24. terraform import: Imports existing infrastructure into Terraform.
25. terraform export: Exports the Terraform state to a file.

▶️ Section 9: Miscellaneous
26. terraform version: Shows the Terraform version.
27. terraform help: Shows the Terraform help.
28. terraform upgrade: Upgrades Terraform to the latest version.

▶️ Section 10: Advanced Topics
29. terraform console: Opens a Terraform console for interactive debugging.
30. terraform graph: Generates a graph of the Terraform configuration.
31. terraform output: Shows the output of a Terraform configuration.

▶️ Section 11: Terraform CLI
32. terraform cli: Manages the Terraform CLI.
33. terraform cli config: Configures the Terraform CLI.

▶️ Section 12: Terraform Configuration
34. terraform config: Manages the Terraform configuration.
35. terraform config init: Initializes a Terraform configuration.

▶️ Section 13: Terraform State Backend
36. terraform state backend: Manages the Terraform state backend.
37. terraform state backend init: Initializes a Terraform state backend.

▶️ Section 14: Terraform Workspaces
38. terraform workspace: Manages Terraform workspaces.
39. terraform workspace new: Creates a new Terraform
