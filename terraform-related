Terraform state files are stored in a local file named terraform.tfstate by default

------------------------------------------------------
This helps in setting the terraform version, which is below piece of code

TFENV_TERRAFORM_VERSION=1.4.6 terraform init -input=false
 TFENV_TERRAFORM_VERSION=1.4.6 terraform plan -input=false -no-color
  TFENV_TERRAFORM_VERSION=1.4.6 terraform apply -input=false -auto-approve -no-color
---------------------------------------------------------
sample terraform code
provider "aws" {
  region = "us-west-1"
}

resource "aws_instance" "myec2" {
  ami           = "ami-12345qwert"
  instance_type = "t2.micro"

  tags = {
    Name = "MyEC2Instance"
  }
}
-------------------------------------------------------------------------------
the backend.tf is the file which is used for locking the terraform state file.

terraform {
  backend "s3" {
    bucket         = "abhishek-s3-demo-xyz" # change this
    key            = "abhi/terraform.tfstate"
    region         = "us-east-1"
    encrypt        = true
    dynamodb_table = "terraform-lock"
  }
}
---------------------------------------------------
To import existing AWS resources into Terraform management, you can use the terraform import command: 
1. Create a resource block
Write a resource block in your configuration to establish a name for the resource. 
2. Specify the resource
Specify the resource type, the name you want to use for the resource, and the resource identifier (ID or ARN) of the existing resource. 
3. Run the command
Run the terraform import command to attach the existing settings of the resource to the name you specified. 
4. Verify the import
Run terraform show to verify that the import was successful. 
------------------------------------------------------
If Resources Were Created with Terraform but Then Modified Manually in AWS

Let’s say you originally created the EC2 instance and security group using Terraform, but you manually modified them in the AWS console (e.g., added more rules to the SG or changed the EC2 instance type).

Steps to Sync Terraform with AWS:

Step 1: Run terraform refresh to Update Terraform’s State File
Terraform’s state file won’t automatically reflect changes made directly in AWS.

terraform refresh

This will update the state file with the latest changes from AWS.

Step 2: Run terraform plan to Detect Any Drift

After refreshing the state, run terraform plan to detect any differences between the AWS resources and the Terraform configuration. Terraform will show any changes that need to be applied.

terraform plan

For example, if you manually changed the SG rules or modified the EC2 instance, Terraform will identify the drift and show the necessary changes.

Step 3: Apply Changes to Sync Resources
If there’s a mismatch (e.g., EC2 instance type or security group rules have been manually modified), Terraform will show what changes it will make. You can then run:

terraform apply

Terraform will update the resources to match the desired configuration in your .tf files.

3. If Resources Were Modified in AWS and Terraform Modified Them Too
If both AWS and Terraform modify the resources, the key is ensuring the state file is always in sync with AWS. When Terraform applies changes, it updates the state file. If someone modifies resources directly in AWS, Terraform might overwrite those changes when it applies.

Note:
For latest version(v0.15+) version:-



The terraform refresh command is deprecated. Use the updated steps to sync Terraform with AWS after manual changes:
 1. Detect Drift
Run terraform plan to compare the current AWS state with your Terraform state and configuration.

terraform plan

 2. Apply Changes
If drift is detected, run terraform apply to sync resources with your .tf configuration.

terraform apply

Key Points:
 • terraform plan now replaces terraform refresh.
 • Avoid manual AWS changes; if made, update your .tf files accordingly.
 • Always review terraform plan before applying changes.
------------------------------------------------------
how to Restore terraform statefile from Backup:

Terraform automatically creates a backup of the state file (terraform.tfstate.backup) before making changes. Rename this backup file to terraform.tfstate and re-run terraform plan to see if it aligns with your current infrastructure1.
Re-import Resources:

If you don't have a suitable backup, you can remove the problematic resources from the state using terraform state rm and then re-import them using terraform import. This requires knowing the exact resource configurations2.
Remote Backend Recovery:

If you're using a remote backend (like S3, Azure Blob Storage, etc.), you might be able to recover the state file from versioned backups. For example, in S3, you can enable versioning and retrieve previous versions of the state file3.
Manual State Reconstruction:

As a last resort, you can manually reconstruct the state file by creating a new one and importing all resources again. This is time-consuming and error-prone but can be necessary if no backups are available4.
-----------------------------------------------------------------------------------------------
Below is a example stage for it
stages { 
    stage('K8s cluster creation') {
       steps {
         
           script {
            def awsUtil = new AwsUtil()
            awsUtil.withAccountRoleArn(accountArn, region, {
            sh """#!/bin/bash
            set
            cd terraform/eks/deployments/prd/corpit/cluster
            TFENV_TERRAFORM_VERSION=1.4.6 terraform init -input=false
            TFENV_TERRAFORM_VERSION=1.4.6 terraform plan -input=false -no-color
            TFENV_TERRAFORM_VERSION=1.4.6 terraform apply -input=false -auto-approve -no-color
            """
         })
        }


terraform state "rm module.aws_s3_bucket_versioning.versioning[\"rajesh-s3"\]"-> to remove a state file if stuck in jenkins. The one in the bracket is the bucketname

sh "terraform apply -var='aws_account=154919775133' -auto-approve"
---------------------------------------------
Whenever you create new ecr repos make sure to come outside the repo and select the newly created repo and go to permissions and check if the policies are added.  If not wait for the automation job to run i.e ecr-repos-non-prod  or ecr-repos-prod automation job
If the file is locked terraform use the command-> terraform force-unlock -force<lock-info-id> (a94a511e-3b00-4f43-1fed-e63157b1a1f5)-> the one is the bracket is id which needs to be inserted which changes dynamically which could be seen in the previous run. You should use the terraform force unlock command after the initialization command in the jenkins pipeline

