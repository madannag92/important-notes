This helps in setting the terraform version, which is below piece of code

TFENV_TERRAFORM_VERSION=1.4.6 terraform init -input=false
 TFENV_TERRAFORM_VERSION=1.4.6 terraform plan -input=false -no-color
  TFENV_TERRAFORM_VERSION=1.4.6 terraform apply -input=false -auto-approve -no-color
---------------------------------------------------------
sample terraform code
provider "aws" {
  region = "us-west-1"
}

resource "aws_instance" "myec2" {
  ami           = "ami-12345qwert"
  instance_type = "t2.micro"

  tags = {
    Name = "MyEC2Instance"
  }
}
---------------------------------------------------
how to Restore terraform statefile from Backup:

Terraform automatically creates a backup of the state file (terraform.tfstate.backup) before making changes. Rename this backup file to terraform.tfstate and re-run terraform plan to see if it aligns with your current infrastructure1.
Re-import Resources:

If you don't have a suitable backup, you can remove the problematic resources from the state using terraform state rm and then re-import them using terraform import. This requires knowing the exact resource configurations2.
Remote Backend Recovery:

If you're using a remote backend (like S3, Azure Blob Storage, etc.), you might be able to recover the state file from versioned backups. For example, in S3, you can enable versioning and retrieve previous versions of the state file3.
Manual State Reconstruction:

As a last resort, you can manually reconstruct the state file by creating a new one and importing all resources again. This is time-consuming and error-prone but can be necessary if no backups are available4.
-----------------------------------------------------------------------------------------------
Below is a example stage for it
stages { 
    stage('K8s cluster creation') {
       steps {
         
           script {
            def awsUtil = new AwsUtil()
            awsUtil.withAccountRoleArn(accountArn, region, {
            sh """#!/bin/bash
            set
            cd terraform/eks/deployments/prd/corpit/cluster
            TFENV_TERRAFORM_VERSION=1.4.6 terraform init -input=false
            TFENV_TERRAFORM_VERSION=1.4.6 terraform plan -input=false -no-color
            TFENV_TERRAFORM_VERSION=1.4.6 terraform apply -input=false -auto-approve -no-color
            """
         })
        }


terraform state "rm module.aws_s3_bucket_versioning.versioning[\"rajesh-s3"\]"-> to remove a state file if stuck in jenkins. The one in the bracket is the bucketname

sh "terraform apply -var='aws_account=154919775133' -auto-approve"
---------------------------------------------
Whenever you create new ecr repos make sure to come outside the repo and select the newly created repo and go to permissions and check if the policies are added.  If not wait for the automation job to run i.e ecr-repos-non-prod  or ecr-repos-prod automation job
If the file is locked terraform use the command-> terraform force-unlock -force<lock-info-id> (a94a511e-3b00-4f43-1fed-e63157b1a1f5)-> the one is the bracket is id which needs to be inserted which changes dynamically which could be seen in the previous run. You should use the terraform force unlock command after the initialization command in the jenkins pipeline

