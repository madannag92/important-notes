This helps in setting the terraform version, which is below piece of code

TFENV_TERRAFORM_VERSION=1.4.6 terraform init -input=false
 TFENV_TERRAFORM_VERSION=1.4.6 terraform plan -input=false -no-color
  TFENV_TERRAFORM_VERSION=1.4.6 terraform apply -input=false -auto-approve -no-color

Below is a example stage for it
stages { 
    stage('K8s cluster creation') {
       steps {
         
           script {
            def awsUtil = new AwsUtil()
            awsUtil.withAccountRoleArn(accountArn, region, {
            sh """#!/bin/bash
            set
            cd terraform/eks/deployments/prd/corpit/cluster
            TFENV_TERRAFORM_VERSION=1.4.6 terraform init -input=false
            TFENV_TERRAFORM_VERSION=1.4.6 terraform plan -input=false -no-color
            TFENV_TERRAFORM_VERSION=1.4.6 terraform apply -input=false -auto-approve -no-color
            """
         })
        }


terraform state "rm module.aws_s3_bucket_versioning.versioning[\"rajesh-s3"\]"-> to remove a state file if stuck in jenkins. The one in the bracket is the bucketname

sh "terraform apply -var='aws_account=154919775133' -auto-approve"
---------------------------------------------
Whenever you create new ecr repos make sure to come outside the repo and select the newly created repo and go to permissions and check if the policies are added.  If not wait for the automation job to run i.e ecr-repos-non-prod  or ecr-repos-prod automation job
If the file is locked terraform use the command-> terraform force-unlock -force<lock-info-id> (a94a511e-3b00-4f43-1fed-e63157b1a1f5)-> the one is the bracket is id which needs to be inserted which changes dynamically which could be seen in the previous run. You should use the terraform force unlock command after the initialization command in the jenkins pipeline

